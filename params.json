{"name":"Swift-mvc","tagline":"Attempting to make a no nonsense JS MVC framework","body":"swift-mvc\r\n=========\r\n\r\nAttempting to make a no nonsense JS MVC framework.\r\n\r\nDependencies:\r\n---------------\r\n - jQuery\r\n - Handlebars\r\n - [Simrou](https://github.com/buero-fuer-ideen/Simrou)\r\n\r\nCreating a new project\r\n------------------------\r\nHere we create a namespace for our project and then\r\nattach a ``Swift.App`` object to our project.\r\n\r\n```\r\nvar project = {};\r\n\r\nproject.app = new Swift.App();\r\n```\r\n\r\nInitialize Controllers\r\n------------------------\r\nThe ``Controller`` object is a child of the ``Swift.App`` instance we\r\ncreated earlier. \r\n\r\nA Controller takes two parameters:\r\n - view: the id of an element that the controller will interact with\r\n - template: the id of a handlebars template script element to render\r\n\r\nControllers have the following default HTTP methods:\r\n - get: default action is to render the template in ther view.\r\n - post: not implemented by default.\r\n - put: not implemented by default.\r\n - delete: not implemented by default.\r\n\r\nThese methods are public so they can easily be overridden.\r\n\r\nThe controller comes with a ``$context`` property which provides the context\r\nfor your handlebars template to be rendered.\r\n\r\n```\r\nproject.controllers = {};\r\n\r\nproject.controllers.homeController = new project.app.Controller('container', 'home-view');\r\nproject.controllers.homeController.$context = {\r\n\tname: 'billpull'\r\n};\r\n\r\nproject.controllers.productController = new project.app.Controller('container', 'product-view');\r\n```\r\n\r\nDefine Routes\r\n-----------------\r\nRoutes will be defined in an object.\r\nEach route is a separate ``Swift.Route`` instance.\r\n\r\nThe route object takes two params:\r\n - path: the path in the browser window to access route\r\n - controller: a reference to a controller for the path.\r\n\r\n```\r\nproject.routes = {\r\n\thome: new Swift.Route('/home', project.controllers.homeController),\r\n\tproducts: new Swift.Route('/products', project.controllers.productController)\r\n};\r\n```\r\n\r\nInitialize Application\r\n------------------------\r\nTo initalize the application call the run method on your\r\n``Swift.App`` instance.\r\n\r\nThe run method takes two params;\r\n - routes: your route object.\r\n - startRoute: the route that should be navigated to first.\r\n\r\n``project.app.run(project.routes, project.routes.home);``\r\n\r\n\r\nSample HTML\r\n------------------\r\n\r\n```\r\n <body>\r\n        <div id=\"container\"></div>\r\n\r\n        <script src=\"jquery.js\"></script>\r\n        <script src=\"handlebars.js\"></script>\r\n        <script src=\"simrou.min.js\"></script>\r\n        <script src=\"swift.js\"></script>\r\n\r\n        <script id=\"home-view\" type=\"text/x-handlebars-template\">\r\n          <h1>Welcome to home {{name}}</h1>\r\n        </script>\r\n\r\n        <script id=\"product-view\" type=\"text/x-handlebars-template\">\r\n          welcome to products.\r\n        </script>\r\n\r\n        <script src=\"app.js\"></script>\r\n</body>\r\n\r\n```\r\n\r\nTODO\r\n--------\r\n - Package repo for easier navigation\r\n - AMD project\r\n - Remove Dependencies: Simrou, Handlebars\r\n - Configurable templating system: beyond handlebars, string templates, file templates\r\n - Flush out Model layer: what methods are needed for model layer?\r\n - Subscribable Models\r\n - Two Way Data Binding","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}